#   return(c(pi_star.31degrees,pi_star.72degrees))
# }
#
# #run simulation 10000 times
# n=10000
# sim_vals <- replicate(n,sim())
#plot distribution of computed pi values and return the 90% conf interval for Temp = 31 degrees
hist(sim_vals[1,], freq = T, xlab = "Probability of O-ring Failure", main = "Histogram of 10000 Estimates of Probability of O-ring Failure at 31 Degrees")
quantile(sim_vals[1,],c(0.05,0.95))
#plot distribution of computed pi values and return the 90% conf interval for Temp = 72 degrees
hist(sim_vals[2,], freq = T, xlab = "Probability of O-ring Failure", main = "Histogram of 10000 Estimates of Probability of O-ring Failure at 72 Degrees")
quantile(sim_vals[2,],c(0.05,0.95))
install.packages("mcprofile")
install.packages("gridExtra")
knitr::opts_chunk$set(echo = TRUE)
library(car)
library(dplyr)
library(Hmisc)
library(ggplot2)
library(mcprofile)
library(gridExtra)
# gridExtra is an extension of the standard library grid, which permits more straightforward
# use of grid features.  We especially use it for grid.arrange() which allows related plots to be
# displayed together.  We use this for clarity and brevity's sake.
df <- read.table(file = "challenger.csv", header = TRUE, sep = ",")
df
temp.plt <- ggplot(df, aes(x = Temp)) +
geom_histogram(aes(y = ..density..), binwidth = 1, fill="#0072B2", colour="black") +
ggtitle("Temperature") + theme(plot.title = element_text(lineheight=1, face="bold"))
pres.plt <- ggplot(df, aes(x = Pressure)) +
geom_histogram(aes(y = ..density..), binwidth = 1, fill="#0072B2", colour="black") +
ggtitle("Pressure") + theme(plot.title = element_text(lineheight=1, face="bold"))
oring.plt <- ggplot(df, aes(x = O.ring)) +
geom_histogram(aes(y = ..density..), binwidth = 1, fill="#0072B2", colour="black") +
ggtitle("O-Ring Failure") + theme(plot.title = element_text(lineheight=1, face="bold"))
grid.arrange(temp.plt, pres.plt, oring.plt, ncol=3)
summary(df)
# describe(df) # too long to fit everything else
otemp.plt <- ggplot(df, aes(Temp, factor(O.ring))) + geom_point(color="firebrick")
otemp.box <- ggplot(df, aes(factor(O.ring), Temp)) +
geom_boxplot(aes(fill = factor(O.ring))) + geom_jitter() +
guides(fill=FALSE) + ggtitle("Temp by Number of O ring failures") +
theme(plot.title = element_text(lineheight=1, face="bold"))
grid.arrange(otemp.plt, otemp.box, ncol=2)
tpres.plt <- ggplot(df, aes(Temp, factor(Pressure))) + geom_point(color="darkseagreen")
tpres.box <- ggplot(df, aes(factor(Pressure), Temp)) +
geom_boxplot(aes(fill = factor(Pressure))) +
geom_jitter() + guides(fill=FALSE) +  ggtitle("Temp by Pressure") +
theme(plot.title = element_text(lineheight=1, face="bold"))
grid.arrange(tpres.plt, tpres.box, ncol=2)
noise <- runif(length(df$Pressure), min=-8, max = 8)
pressure_noise <- df$Pressure + noise
opres.plt <- ggplot(df, aes(pressure_noise, factor(O.ring))) + geom_point(color="chartreuse4")
opres.box <- ggplot(df, aes(factor(O.ring), Pressure)) +
geom_boxplot(aes(fill = factor(O.ring))) + geom_jitter() + guides(fill=FALSE) +
ggtitle("Pressure by O-ring failures per Flight") +
theme(plot.title = element_text(lineheight=1, face="bold"))
grid.arrange(opres.plt, opres.box, ncol=2)
#create a new dataframe that treats each o-ring independently
df2 <- data.frame(expand.grid(Flight = seq(1, 23, 1), O.ring.label = seq(1, 6, 1), Temp = 0,
Pressure = 0, O.ring.fail = 0))
rownames(df2) <- paste(df2$Flight, df2$O.ring.label) #flight + o ring #
for(row in rownames(df2)){
fl <- df2[row, ]$Flight
df2[row, ]$Temp <- df[df$Flight == fl, ]$Temp # set Temp
df2[row, ]$Pressure <- df[df$Flight == fl, ]$Pressure # set Pressure
df2[row, ]$O.ring.fail <- ifelse(df2[row, ]$O.ring.label <=
df[df$Flight == fl, ]$O.ring, 1, 0)  # set O.ring.fail
}
# df2
ggplot(df2, aes(factor(O.ring.fail), Temp)) +
geom_boxplot(aes(fill = factor(O.ring.fail))) + geom_jitter() +
guides(fill=FALSE) + ggtitle("Temp by Individual O-ring failure") +
theme(plot.title = element_text(lineheight=1, face="bold"))
model1 <- glm(O.ring/Number ~ Temp + Pressure, data = df, family = binomial,
weights=Number)
summary(model1)
ha <- model1
h0 <- glm(O.ring/Number ~ Pressure, data = df, family = binomial, weights = Number)
anova(h0, ha, test = "Chisq")
h0 <- glm(O.ring/Number ~ Temp, data = df, family = binomial, weights = Number)
anova(h0, ha, test = "Chisq")
model2 <- h0
summary(model2)
# pi_hat vs. Temp
newdf <- data.frame(Temp = seq(from = 31, to = 81, by = 1)) #x-values to graph
lp.hat <- predict.glm(model2, newdata = newdf, type = "link", se.fit = TRUE)
lp.hat.mean <- lp.hat$fit
pi.hat <- exp(lp.hat.mean) / (1 + exp(lp.hat.mean))
plot(newdf$Temp, pi.hat, ylim = range(c(0,1)),
xlab = "Temperature", ylab = "Predicted Prob of single O-ring failure",
main = "Pi_hat vs. Temperature", type = 'l', col = 'black', lwd = 2)
#expected number of failures vs. Temp
plot(newdf$Temp, pi.hat * 6, ylim = range(c(0,6)),
xlab = "Temperature", ylab = "Predicted Number of O-ring failures",
main = "Predicted O-ring Failures vs. Temperature", type = 'l', col = 'blue',
lwd = 2)
ci.pi <- function(newdata, mod.fit.obj, alpha){
linear.pred <- predict(object = mod.fit.obj, newdata = newdata, type = "link",
se = TRUE)
CI.lin.pred.lower <- linear.pred$fit - qnorm(p = 1-alpha/2)*linear.pred$se
CI.lin.pred.upper <- linear.pred$fit + qnorm(p = 1-alpha/2)*linear.pred$se
CI.pi.lower <- exp(CI.lin.pred.lower) / (1 + exp(CI.lin.pred.lower))
CI.pi.upper <- exp(CI.lin.pred.upper) / (1+ exp(CI.lin.pred.upper))
list(lower = CI.pi.lower, upper = CI.pi.upper)
}
plot(newdf$Temp, pi.hat, ylim = range(c(0, 1)),
xlab = "Temperature", ylab = "Predicted Prob of Single O-ring failure",
main= "Predicted Prob of Single O-ring failure", type = 'l', col = 'black',
lwd = 2)
curve(expr = ci.pi(newdata = data.frame(Temp = x), mod.fit.obj = model2,
alpha = 0.05)$lower, col = "green", lty = "dotdash", add = TRUE, xlim = c(31, 81))
curve(expr = ci.pi(newdata = data.frame(Temp = x), mod.fit.obj = model2,
alpha = 0.05)$upper, col = "green", lty = "dotdash", add = TRUE, xlim = c(31, 81))
# Prob(failure) ~ temp = 31
model2.pred31 <- model2$coefficients[1] + model2$coefficients[2]*31
model2.pred31
exp(model2.pred31)/(1+exp(model2.pred31))
# Another way to do it
predict.data<-data.frame(Temp=31)
predict(object = model2, newdata = predict.data, type = "link")
predict(object = model2, newdata = predict.data, type = "response")
# Wald CI
pred31 <- predict(object = model2, newdata = predict.data, type = "link", se = TRUE)
pred31
pi.hat31 <- exp(pred31$fit) / (1 + exp(pred31$fit))
alpha <- 0.05
CI.pred31 <- pred31$fit + qnorm(p = c(alpha/2, 1-alpha/2))* pred31$se
CI.pi <- exp(CI.pred31)/(1 + exp(CI.pred31))
#CI.pi
data.frame(predict.data, pi.hat31, lower = CI.pi[1], upper = CI.pi[2])
# Profile Likelihood Ratio Interval
K <- matrix(data = c(1,31), nrow = 1, ncol = 2)
model2.combo <- mcprofile(object = model2, CM = K)
ci.logit.profile <- confint(object = model2.combo, level = 0.95)
#ci.logit.profile
exp(ci.logit.profile$confint)/(1 + exp(ci.logit.profile$confint))
#define sigmoid function for computing values of pi
sigmoid = function(x) {
1 / (1 + exp(-x))
}
#start with the parameter estimates from our model and our Temp data
beta0 = model2$coefficients[1]
beta1 = model2$coefficients[2]
x <- df$Temp
pi <- sigmoid(beta0 + beta1*x)
weights <- df$Number
#simulate new O.ring failure counts to estimate new model parameters
sim <- function(){
#simulate new O.ring failure counts as binomial random variable with n=6
#trials and p=pi probability of success
y <- rbinom(n = length(x), size = 6, prob = pi)
#fit a new regression model on the simulated O.ring failure counts
mod.fit <- glm(y/weights ~ x, family = binomial, weights = weights)
beta0.star = mod.fit$coefficients[1]
beta1.star = mod.fit$coefficients[2]
#use new model to compute predicted probability of O.ring failure at Temp = 31
#and 72 degrees
pi_star.31degrees <- sigmoid(beta0.star + beta1.star*31)
pi_star.72degrees <- sigmoid(beta0.star + beta1.star*72)
return(c(pi_star.31degrees,pi_star.72degrees))
}
#run simulation 10000 times
n=10000
sim_vals <- replicate(n,sim())
#plot distribution of computed pi values and return the 90% conf interval for
#Temp = 31 degrees
hist(sim_vals[1,], freq = T, xlab = "Probability of O-ring Failure",
main = "Histogram of 10000 Estimates of Probability of O-ring Failure at 31 Degrees")
quantile(sim_vals[1,],c(0.05,0.95))
#plot distribution of computed pi values and return the 90% conf interval for
#Temp = 72 degrees
hist(sim_vals[2,], freq = T, xlab = "Probability of O-ring Failure",
main = "Histogram of 10000 Estimates of Probability of O-ring Failure at 72 Degrees")
quantile(sim_vals[2,],c(0.05,0.95))
model3 <- glm(O.ring/Number ~ Temp + I(Temp^2), data = df, family = binomial,
weights = Number)
summary(model3)
ha <- model3
anova(h0, ha, test = "Chisq")
df$bin.Temp = df$Temp<65
model4 <- glm(O.ring/Number ~ bin.Temp, data = df, family = binomial,
weights = Number)
summary(model4)
exp(1.9792)
exp(-0.1156)
df$bin.Temp = df$Temp<67
model4 <- glm(O.ring/Number ~ bin.Temp, data = df, family = binomial,
weights = Number)
summary(model4)
df$bin.Temp = df$Temp<65
model4 <- glm(O.ring/Number ~ bin.Temp, data = df, family = binomial,
weights = Number)
summary(model4)
exp(1.9792)
exp(-0.1156)
#pi vs. Temp  ## QUESTION - the books says to plot _pi_ vs temp, not pi hat. I
#assume they're looking for the latter, though?
newdf <- data.frame(bin.Temp = c(TRUE,F))
lp.hat <- predict.glm(model4, newdata = newdf, type = "link", se.fit = TRUE)
lp.hat.mean <- lp.hat$fit
pi.hat <- exp(lp.hat.mean) / (1 + exp(lp.hat.mean))
plot(newdf$bin.Temp, pi.hat, ylim = range(c(0,1)),
xlab = "Binned Temperature", ylab = "Predicted Prob of single O-ring failure",
main = "Predicted Pi vs. Temperature", type = 'l', col = 'black', lwd = 2)
#expected number of failures vs. Temp
plot(newdf$bin.Temp, pi.hat * 6, ylim = range(c(0,6)),
xlab = "Binned Temperature", ylab = "Predicted Number of O-ring failures",
main = "Predicted O-ring Failures vs. Temperature", type = 'l', col = 'blue',
lwd = 2)
model4 <- glm(O.ring/Number ~ Temp + log.Pressure, data = df, family = binomial, weights = Number)
log.pressure = log(df$Pressure)
model4 <- glm(O.ring/Number ~ Temp + log.Pressure, data = df, family = binomial, weights = Number)
log.Pressure = log(df$Pressure)
model4 <- glm(O.ring/Number ~ Temp + log.Pressure, data = df, family = binomial, weights = Number)
summary(model4)
ha <- model4
anova(h0, ha, test = "Chisq")
translate.Pressure = df$Pressure
model4 <- glm(O.ring/Number ~ Temp + translate.Pressure, data = df, family = binomial, weights = Number)
summary(model4)
ha <- model4
anova(h0, ha, test = "Chisq")
model4a <- glm(O.ring/Number ~ Temp + Pressure + Temp:Pressure, data = df,
family = binomial, weights = Number)
summary(model4a)
df$bin.Temp = df$Temp<65
model4 <- glm(O.ring/Number ~ bin.Temp, data = df, family = binomial,
weights = Number)
summary(model4)
exp(model4$coefficients[1])
df$bin.Temp = df$Temp<65
model4 <- glm(O.ring/Number ~ bin.Temp, data = df, family = binomial,
weights = Number)
summary(model4)
exp(model4$coefficients[2])
lin.model <- lm(O.ring/Number ~ Temp, data = df, weights = Number)
summary(lin.model)
lin.model <- lm(O.ring/Number ~ Temp, data = df, weights = Number)
summary(lin.model)
ci.pi <- function(newdata, mod.fit.obj, alpha){
linear.pred <- predict(object = mod.fit.obj, newdata = newdata, type = "link",
se = TRUE)
CI.lin.pred.lower <- linear.pred$fit - qnorm(p = 1-alpha/2)*linear.pred$se
CI.lin.pred.upper <- linear.pred$fit + qnorm(p = 1-alpha/2)*linear.pred$se
CI.pi.lower <- exp(CI.lin.pred.lower) / (1 + exp(CI.lin.pred.lower))
CI.pi.upper <- exp(CI.lin.pred.upper) / (1+ exp(CI.lin.pred.upper))
list(lower = CI.pi.lower, upper = CI.pi.upper)
}
plot(newdf$Temp, pi.hat, ylim = range(c(0, 1)),
xlab = "Temperature", ylab = "Predicted Prob of Single O-ring failure",
main= "Predicted Prob of Single O-ring failure", type = 'l', col = 'black',
lwd = 2)
lin.model <- lm(O.ring/Number ~ Temp, data = df, weights = Number)
summary(lin.model)
# pi_hat vs. Temp
#newdf <- data.frame(Temp = seq(from = 31, to = 81, by = 1)) #x-values to graph
lin_p.hat <- predict.lm(lin.model, newdata = newdf, type = "link", se.fit = TRUE)
lin.model <- lm(O.ring/Number ~ Temp, data = df, weights = Number)
summary(lin.model)
# pi_hat vs. Temp
newdf <- data.frame(Temp = seq(from = 31, to = 81, by = 1)) #x-values to graph
lin_p.hat <- predict.lm(lin.model, newdata = newdf, type = "link", se.fit = TRUE)
lin.model <- lm(O.ring/Number ~ Temp, data = df, weights = Number)
summary(lin.model)
# pi_hat vs. Temp
newdf <- data.frame(Temp = seq(from = 31, to = 81, by = 1)) #x-values to graph
lin_p.hat <- predict.lm(lin.model, newdata = newdf, se.fit = TRUE)
lin_p.hat.mean <- lp.hat$fit
#pi.hat <- exp(lp.hat.mean) / (1 + exp(lp.hat.mean))
plot(newdf$Temp, pi.hat, ylim = range(c(0,1)),
xlab = "Temperature", ylab = "Predicted Prob of single O-ring failure",
main = "Pi_hat vs. Temperature", type = 'l', col = 'black', lwd = 2)
lin.model <- lm(O.ring/Number ~ Temp, data = df, weights = Number)
summary(lin.model)
# pi_hat vs. Temp
newdf <- data.frame(Temp = seq(from = 31, to = 81, by = 1)) #x-values to graph
lin_p.hat <- predict.lm(lin.model, newdata = newdf, se.fit = TRUE)
lin_p.hat.mean <- lp.hat$fit
#pi.hat <- exp(lp.hat.mean) / (1 + exp(lp.hat.mean))
plot(newdf$Temp, lin_pi.hat, ylim = range(c(0,1)),
xlab = "Temperature", ylab = "Predicted Prob of single O-ring failure",
main = "Pi_hat vs. Temperature", type = 'l', col = 'black', lwd = 2)
lin.model <- lm(O.ring/Number ~ Temp, data = df, weights = Number)
summary(lin.model)
# pi_hat vs. Temp
newdf <- data.frame(Temp = seq(from = 31, to = 81, by = 1)) #x-values to graph
lin_p.hat <- predict.lm(lin.model, newdata = newdf, se.fit = TRUE)
lin_p.hat.mean <- lp.hat$fit
#pi.hat <- exp(lp.hat.mean) / (1 + exp(lp.hat.mean))
plot(newdf$Temp, lin_pi.hat, ylim = range(c(0,1)),
xlab = "Temperature", ylab = "Predicted Prob of single O-ring failure",
main = "Pi_hat vs. Temperature")#, type = 'l', col = 'black', lwd = 2)
lin.model <- lm(O.ring/Number ~ Temp, data = df, weights = Number)
summary(lin.model)
# pi_hat vs. Temp
newdf <- data.frame(Temp = seq(from = 31, to = 81, by = 1)) #x-values to graph
lin_p.hat <- predict.lm(lin.model, newdata = newdf, se.fit = TRUE)
lin_p.hat.mean <- lp.hat$fit
#pi.hat <- exp(lp.hat.mean) / (1 + exp(lp.hat.mean))
plot(newdf$Temp, lin_p.hat, ylim = range(c(0,1)),
xlab = "Temperature", ylab = "Predicted Prob of single O-ring failure",
main = "Pi_hat vs. Temperature")#, type = 'l', col = 'black', lwd = 2)
lin.model <- lm(O.ring/Number ~ Temp, data = df, weights = Number)
summary(lin.model)
# pi_hat vs. Temp
newdf <- data.frame(Temp = seq(from = 31, to = 81, by = 1)) #x-values to graph
lin_p.hat <- predict.lm(lin.model, newdata = newdf, se.fit = TRUE)
lin_p.hat.mean <- lp.hat$fit
#pi.hat <- exp(lp.hat.mean) / (1 + exp(lp.hat.mean))
plot(newdf$Temp, lin_p.hat, ylim = range(c(0,1)),
xlab = "Temperature", ylab = "Predicted Prob of single O-ring failure",
main = "Pi_hat vs. Temperature", type = 'l', col = 'black', lwd = 2)
lin.model <- lm(O.ring/Number ~ Temp, data = df, weights = Number)
summary(lin.model)
# pi_hat vs. Temp
newdf <- data.frame(Temp = seq(from = 31, to = 81, by = 1)) #x-values to graph
lin_p.hat <- predict.lm(lin.model, newdata = newdf, se.fit = TRUE)
lin_p.hat.mean <- lp.hat$fit
#pi.hat <- exp(lp.hat.mean) / (1 + exp(lp.hat.mean))
print(lin_p.hat)
# plot(newdf$Temp, lin_p.hat, ylim = range(c(0,1)),
#      xlab = "Temperature", ylab = "Predicted Prob of single O-ring failure",
#      main = "Pi_hat vs. Temperature", type = 'l', col = 'black', lwd = 2)
#
# #expected number of failures vs. Temp
# plot(newdf$Temp, lin_p.hat * 6, ylim = range(c(0,6)),
#      xlab = "Temperature", ylab = "Predicted Number of O-ring failures",
#      main = "Predicted O-ring Failures vs. Temperature for Linear Model", type = 'l', col = 'blue',
#      lwd = 2)
#
# ci.pi <- function(newdata, mod.fit.obj, alpha){
#   linear.pred <- predict(object = mod.fit.obj, newdata = newdata, type = "link",
#                          se = TRUE)
#   CI.lin.pred.lower <- linear.pred$fit - qnorm(p = 1-alpha/2)*linear.pred$se
#   CI.lin.pred.upper <- linear.pred$fit + qnorm(p = 1-alpha/2)*linear.pred$se
#   CI.pi.lower <- exp(CI.lin.pred.lower) / (1 + exp(CI.lin.pred.lower))
#   CI.pi.upper <- exp(CI.lin.pred.upper) / (1+ exp(CI.lin.pred.upper))
#   list(lower = CI.pi.lower, upper = CI.pi.upper)
# }
#
# plot(newdf$Temp, lin_p.hat, ylim = range(c(0, 1)),
#      xlab = "Temperature", ylab = "Predicted Prob of Single O-ring failure",
#      main= "Predicted Prob of Single O-ring failure For Linear Model", type = 'l', col = 'black',
#      lwd = 2)
# curve(expr = ci.pi(newdata = data.frame(Temp = x), mod.fit.obj = lin.model,
#                    alpha = 0.05)$lower, col = "green", lty = "dotdash", add = TRUE, xlim = c(31, 81))
# curve(expr = ci.pi(newdata = data.frame(Temp = x), mod.fit.obj = lin.model,
#                    alpha = 0.05)$upper, col = "green", lty = "dotdash", add = TRUE, xlim = c(31, 81))
lin.model <- lm(O.ring/Number ~ Temp, data = df, weights = Number)
summary(lin.model)
lin.model2 <- lm(O.ring/Number ~ bin.Temp, data = df, weights = Number)
summary(lin.model2)
lin.model <- lm(O.ring/Number ~ Temp, data = df, weights = Number)
summary(lin.model)
plot(lin.model)
lin.model2 <- lm(O.ring/Number ~ bin.Temp, data = df, weights = Number)
summary(lin.model2)
plot(lin.model)
lin.model <- lm(O.ring/Number ~ Temp, data = df, weights = Number)
summary(lin.model)
plot(lin.model)
lin.model2 <- lm(O.ring/Number ~ bin.Temp, data = df, weights = Number)
summary(lin.model2)
plot(lin.model2)
?sample
hist(sim_vals[1,], freq = T, xlab = "Probability of O-ring Failure",
main = "Histogram of 10000 Estimates of Probability of O-ring Failure at 31 Degrees")
quantile(sim_vals[1,],c(0.05,0.95))
#plot distribution of computed pi values and return the 90% conf interval for
#Temp = 72 degrees
hist(sim_vals[2,], freq = T, xlab = "Probability of O-ring Failure",
main = "Histogram of 10000 Estimates of Probability of O-ring Failure at 72 Degrees")
quantile(sim_vals[2,],c(0.05,0.95))
#define sigmoid function for computing values of pi
sigmoid = function(x) {
1 / (1 + exp(-x))
}
#start with the parameter estimates from our model and our Temp data
beta0 = model2$coefficients[1]
beta1 = model2$coefficients[2]
x <- df$Temp
#pi <- sigmoid(beta0 + beta1*x)
weights <- df$Number
#simulate new O.ring failure counts to estimate new model parameters
sim <- function(){
#simulate new O.ring failure counts as binomial random variable with n=6
#trials and p=pi probability of success
x.sample <- sample(x, 23, replace = TRUE)
pi <- sigmoid(beta0 + beta1*x.sample)
y <- rbinom(n = length(x.sample), size = 6, prob = pi)
#fit a new regression model on the simulated O.ring failure counts
mod.fit <- glm(y/weights ~ x.sample, family = binomial, weights = weights)
beta0.star = mod.fit$coefficients[1]
beta1.star = mod.fit$coefficients[2]
#use new model to compute predicted probability of O.ring failure at Temp = 31
#and 72 degrees
pi_star.31degrees <- sigmoid(beta0.star + beta1.star*31)
pi_star.72degrees <- sigmoid(beta0.star + beta1.star*72)
return(c(pi_star.31degrees,pi_star.72degrees))
}
#run simulation 10000 times
n=10000
sim_vals <- replicate(n,sim())
#plot distribution of computed pi values and return the 90% conf interval for
#Temp = 31 degrees
hist(sim_vals[1,], freq = T, xlab = "Probability of O-ring Failure",
main = "Histogram of 10000 Estimates of Probability of O-ring Failure at 31 Degrees")
quantile(sim_vals[1,],c(0.05,0.95))
#plot distribution of computed pi values and return the 90% conf interval for
#Temp = 72 degrees
hist(sim_vals[2,], freq = T, xlab = "Probability of O-ring Failure",
main = "Histogram of 10000 Estimates of Probability of O-ring Failure at 72 Degrees")
quantile(sim_vals[2,],c(0.05,0.95))
#define sigmoid function for computing values of pi
sigmoid = function(x) {
1 / (1 + exp(-x))
}
#start with the parameter estimates from our model and our Temp data
beta0 = model2$coefficients[1]
beta1 = model2$coefficients[2]
x <- df$Temp
weights <- df$Number
set.seed(23)
#simulate new O.ring failure counts to estimate new model parameters
sim <- function(){
#Sample temp data with replacement (bootstrap)
x.sample <- sample(x, 23, replace = TRUE)
#If above step is unnecessary can just use original data, which yields very similar results
#x.sample <- x
#Calculate i
pi <- sigmoid(beta0 + beta1*x.sample)
#simulate new O.ring failure counts as binomial random variable with n=6
#trials and p=pi probability of success
y <- rbinom(n = length(x.sample), size = 6, prob = pi)
#fit a new regression model on the simulated O.ring failure counts
mod.fit <- glm(y/weights ~ x.sample, family = binomial, weights = weights)
beta0.star = mod.fit$coefficients[1]
beta1.star = mod.fit$coefficients[2]
#use new model to compute predicted probability of O.ring failure at Temp = 31
#and 72 degrees
pi_star.31degrees <- sigmoid(beta0.star + beta1.star*31)
pi_star.72degrees <- sigmoid(beta0.star + beta1.star*72)
return(c(pi_star.31degrees,pi_star.72degrees))
}
#run simulation 10000 times
n=10
sim_vals <- replicate(n,sim())
print(sim_vals)
#plot distribution of computed pi values and return the 90% conf interval for
#Temp = 31 degrees
hist(sim_vals[1,], freq = T, xlab = "Probability of O-ring Failure",
main = "Histogram of 10000 Estimates of Probability of O-ring Failure at 31 Degrees")
quantile(sim_vals[1,],c(0.05,0.95))
#plot distribution of computed pi values and return the 90% conf interval for
#Temp = 72 degrees
hist(sim_vals[2,], freq = T, xlab = "Probability of O-ring Failure",
main = "Histogram of 10000 Estimates of Probability of O-ring Failure at 72 Degrees")
quantile(sim_vals[2,],c(0.05,0.95))
#define sigmoid function for computing values of pi
sigmoid = function(x) {
1 / (1 + exp(-x))
}
#start with the parameter estimates from our model and our Temp data
beta0 = model2$coefficients[1]
beta1 = model2$coefficients[2]
x <- df$Temp
weights <- df$Number
set.seed(23)
#simulate new O.ring failure counts to estimate new model parameters
sim <- function(){
#Sample temp data with replacement (bootstrap)
x.sample <- sample(x, 23, replace = TRUE)
#If above step is unnecessary can just use original data, which yields very similar results
#x.sample <- x
#Calculate pi
pi <- sigmoid(beta0 + beta1*x.sample)
#simulate new O.ring failure counts as binomial random variable with n=6
#trials and p=pi probability of success
y <- rbinom(n = length(x.sample), size = 6, prob = pi)
#fit a new regression model on the simulated O.ring failure counts
mod.fit <- glm(y/weights ~ x.sample, family = binomial, weights = weights)
beta0.star = mod.fit$coefficients[1]
beta1.star = mod.fit$coefficients[2]
#use new model to compute predicted probability of O.ring failure at Temp = 31
#and 72 degrees
pi_star.31degrees <- sigmoid(beta0.star + beta1.star*31)
pi_star.72degrees <- sigmoid(beta0.star + beta1.star*72)
return(c(pi_star.31degrees,pi_star.72degrees))
}
#run simulation 10000 times
n=10000
sim_vals <- replicate(n,sim())
#plot distribution of computed pi values and return the 90% conf interval for
#Temp = 31 degrees
hist(sim_vals[1,], freq = T, xlab = "Probability of O-ring Failure",
main = "Histogram of 10000 Estimates of Probability of O-ring Failure at 31 Degrees")
quantile(sim_vals[1,],c(0.05,0.95))
#plot distribution of computed pi values and return the 90% conf interval for
#Temp = 72 degrees
hist(sim_vals[2,], freq = T, xlab = "Probability of O-ring Failure",
main = "Histogram of 10000 Estimates of Probability of O-ring Failure at 72 Degrees")
quantile(sim_vals[2,],c(0.05,0.95))
lin.model <- lm(O.ring/Number ~ Temp, data = df, weights = Number)
summary(lin.model)
plot(lin.model)
mean(lin.model$residuals)
(1-lin.model$coefficients[1])/lin.model$coefficients[2]
(-lin.model$coefficients[1])/lin.model$coefficients[2]
(.5-lin.model$coefficients[1])/lin.model$coefficients[2]
(.25-lin.model$coefficients[1])/lin.model$coefficients[2]
exp(0.1419)
