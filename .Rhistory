#
# #get mean/sd
# mu <- mean(model2$residuals)
# sigma <- sd(model2$residuals)
#
# stat <- function(data){
#   model <- glm(O.ring/Number ~ Pressure, data = data, family = binomial, weights = Number)
#   return(coef(model))
# }
#
# sigmoid = function(x) {
#    1 / (1 + exp(-x))
# }
#
# sim <- function(data,mle){
#   n <- dim(data)[1]
#   lin_est <- mle[2]*data$temp+mle[1]+rnorm(n, mean = mu, sd = sigma)
#   data$O.ring <- data$Number*sigmoid(lin_est)
#   return(data)
# }
#
# boot.out<-boot(df, statistic=stat, R=100,
#                ran.gen=sim,
#                sim="parametric", mle=mle, weights=df$Number)
#
# boot.ci(boot.out, type = "basic", index = 1) #for intercept
# boot.ci(boot.out, type = "basic", index = 2) #for beta coef
sigmoid = function(x) {
1 / (1 + exp(-x))
}
beta0 = model2$coefficients[1]
beta1 = model2$coefficients[2]
x <- df$Temp
pi <- sigmoid(beta0 + beta1*x)
weights <- df$Number
sim <- function(){
y <- rbinom(n = length(x), size = 6, prob = pi)
mod.fit <- glm(y/weights ~ x, family = binomial, weights = weights)
beta0.star = mod.fit$coefficients[1]
beta1.star = mod.fit$coefficients[2]
pi_star.31degrees <- sigmoid(beta0.star + beta1.star*31)
pi_star.72degrees <- sigmoid(beta0.star + beta1.star*72)
return(c(pi_star.31degrees,pi_star.72degrees))
}
n=10
apply(as.array(vector(length=n)),2,FUN=sim)
# #install.packages("boot")
# library(boot)
#
# #get model coeffs
# mle <- coef(model2)
#
# #get mean/sd
# mu <- mean(model2$residuals)
# sigma <- sd(model2$residuals)
#
# stat <- function(data){
#   model <- glm(O.ring/Number ~ Pressure, data = data, family = binomial, weights = Number)
#   return(coef(model))
# }
#
# sigmoid = function(x) {
#    1 / (1 + exp(-x))
# }
#
# sim <- function(data,mle){
#   n <- dim(data)[1]
#   lin_est <- mle[2]*data$temp+mle[1]+rnorm(n, mean = mu, sd = sigma)
#   data$O.ring <- data$Number*sigmoid(lin_est)
#   return(data)
# }
#
# boot.out<-boot(df, statistic=stat, R=100,
#                ran.gen=sim,
#                sim="parametric", mle=mle, weights=df$Number)
#
# boot.ci(boot.out, type = "basic", index = 1) #for intercept
# boot.ci(boot.out, type = "basic", index = 2) #for beta coef
sigmoid = function(x) {
1 / (1 + exp(-x))
}
beta0 = model2$coefficients[1]
beta1 = model2$coefficients[2]
x <- df$Temp
pi <- sigmoid(beta0 + beta1*x)
weights <- df$Number
sim <- function(){
y <- rbinom(n = length(x), size = 6, prob = pi)
mod.fit <- glm(y/weights ~ x, family = binomial, weights = weights)
beta0.star = mod.fit$coefficients[1]
beta1.star = mod.fit$coefficients[2]
pi_star.31degrees <- sigmoid(beta0.star + beta1.star*31)
pi_star.72degrees <- sigmoid(beta0.star + beta1.star*72)
return(c(pi_star.31degrees,pi_star.72degrees))
}
n=10
replicate(n,sim)
# #install.packages("boot")
# library(boot)
#
# #get model coeffs
# mle <- coef(model2)
#
# #get mean/sd
# mu <- mean(model2$residuals)
# sigma <- sd(model2$residuals)
#
# stat <- function(data){
#   model <- glm(O.ring/Number ~ Pressure, data = data, family = binomial, weights = Number)
#   return(coef(model))
# }
#
# sigmoid = function(x) {
#    1 / (1 + exp(-x))
# }
#
# sim <- function(data,mle){
#   n <- dim(data)[1]
#   lin_est <- mle[2]*data$temp+mle[1]+rnorm(n, mean = mu, sd = sigma)
#   data$O.ring <- data$Number*sigmoid(lin_est)
#   return(data)
# }
#
# boot.out<-boot(df, statistic=stat, R=100,
#                ran.gen=sim,
#                sim="parametric", mle=mle, weights=df$Number)
#
# boot.ci(boot.out, type = "basic", index = 1) #for intercept
# boot.ci(boot.out, type = "basic", index = 2) #for beta coef
sigmoid = function(x) {
1 / (1 + exp(-x))
}
beta0 = model2$coefficients[1]
beta1 = model2$coefficients[2]
x <- df$Temp
pi <- sigmoid(beta0 + beta1*x)
weights <- df$Number
sim <- function(){
y <- rbinom(n = length(x), size = 6, prob = pi)
mod.fit <- glm(y/weights ~ x, family = binomial, weights = weights)
beta0.star = mod.fit$coefficients[1]
beta1.star = mod.fit$coefficients[2]
pi_star.31degrees <- sigmoid(beta0.star + beta1.star*31)
pi_star.72degrees <- sigmoid(beta0.star + beta1.star*72)
return(c(pi_star.31degrees,pi_star.72degrees))
}
n=10
replicate(n,sim())
# #install.packages("boot")
# library(boot)
#
# #get model coeffs
# mle <- coef(model2)
#
# #get mean/sd
# mu <- mean(model2$residuals)
# sigma <- sd(model2$residuals)
#
# stat <- function(data){
#   model <- glm(O.ring/Number ~ Pressure, data = data, family = binomial, weights = Number)
#   return(coef(model))
# }
#
# sigmoid = function(x) {
#    1 / (1 + exp(-x))
# }
#
# sim <- function(data,mle){
#   n <- dim(data)[1]
#   lin_est <- mle[2]*data$temp+mle[1]+rnorm(n, mean = mu, sd = sigma)
#   data$O.ring <- data$Number*sigmoid(lin_est)
#   return(data)
# }
#
# boot.out<-boot(df, statistic=stat, R=100,
#                ran.gen=sim,
#                sim="parametric", mle=mle, weights=df$Number)
#
# boot.ci(boot.out, type = "basic", index = 1) #for intercept
# boot.ci(boot.out, type = "basic", index = 2) #for beta coef
sigmoid = function(x) {
1 / (1 + exp(-x))
}
beta0 = model2$coefficients[1]
beta1 = model2$coefficients[2]
x <- df$Temp
pi <- sigmoid(beta0 + beta1*x)
weights <- df$Number
sim <- function(){
y <- rbinom(n = length(x), size = 6, prob = pi)
mod.fit <- glm(y/weights ~ x, family = binomial, weights = weights)
beta0.star = mod.fit$coefficients[1]
beta1.star = mod.fit$coefficients[2]
pi_star.31degrees <- sigmoid(beta0.star + beta1.star*31)
pi_star.72degrees <- sigmoid(beta0.star + beta1.star*72)
return(c(pi_star.31degrees,pi_star.72degrees))
}
n=10
sim_vals <- replicate(n,sim())
hist(sim_vals[1,])
# #install.packages("boot")
# library(boot)
#
# #get model coeffs
# mle <- coef(model2)
#
# #get mean/sd
# mu <- mean(model2$residuals)
# sigma <- sd(model2$residuals)
#
# stat <- function(data){
#   model <- glm(O.ring/Number ~ Pressure, data = data, family = binomial, weights = Number)
#   return(coef(model))
# }
#
# sigmoid = function(x) {
#    1 / (1 + exp(-x))
# }
#
# sim <- function(data,mle){
#   n <- dim(data)[1]
#   lin_est <- mle[2]*data$temp+mle[1]+rnorm(n, mean = mu, sd = sigma)
#   data$O.ring <- data$Number*sigmoid(lin_est)
#   return(data)
# }
#
# boot.out<-boot(df, statistic=stat, R=100,
#                ran.gen=sim,
#                sim="parametric", mle=mle, weights=df$Number)
#
# boot.ci(boot.out, type = "basic", index = 1) #for intercept
# boot.ci(boot.out, type = "basic", index = 2) #for beta coef
sigmoid = function(x) {
1 / (1 + exp(-x))
}
beta0 = model2$coefficients[1]
beta1 = model2$coefficients[2]
x <- df$Temp
pi <- sigmoid(beta0 + beta1*x)
weights <- df$Number
sim <- function(){
y <- rbinom(n = length(x), size = 6, prob = pi)
mod.fit <- glm(y/weights ~ x, family = binomial, weights = weights)
beta0.star = mod.fit$coefficients[1]
beta1.star = mod.fit$coefficients[2]
pi_star.31degrees <- sigmoid(beta0.star + beta1.star*31)
pi_star.72degrees <- sigmoid(beta0.star + beta1.star*72)
return(c(pi_star.31degrees,pi_star.72degrees))
}
n=10000
sim_vals <- replicate(n,sim())
hist(sim_vals[1,])
hist(sim_vals[2,])
?confint()
confint(sim_vals[1,])
quantile(sim_vals[1,],c(0.05,0.95))
quantile(sim_vals[2,],c(0.05,0.95))
quantile(sim_vals,c(0.05,0.95))
?quantile
#define sigmoid function for computing values of pi
sigmoid = function(x) {
1 / (1 + exp(-x))
}
#start with the parameter estimates from our model and our Temp data
beta0 = model2$coefficients[1]
beta1 = model2$coefficients[2]
x <- df$Temp
pi <- sigmoid(beta0 + beta1*x)
weights <- df$Number
#simulate new O.ring failure counts to estimate new model parameters
sim <- function(){
#simulate new O.ring failure counts as binomial random variable with n=6 trials and p=pi probability of success
y <- rbinom(n = length(x), size = 6, prob = pi)
#fit a new regression model on the simulated O.ring failure counts
mod.fit <- glm(y/weights ~ x, family = binomial, weights = weights)
beta0.star = mod.fit$coefficients[1]
beta1.star = mod.fit$coefficients[2]
#use new model to compute predicted probability of O.ring failure at Temp = 31 and 72 degrees
pi_star.31degrees <- sigmoid(beta0.star + beta1.star*31)
pi_star.72degrees <- sigmoid(beta0.star + beta1.star*72)
return(c(pi_star.31degrees,pi_star.72degrees))
}
#run simulation 10000 times
n=10000
sim_vals <- replicate(n,sim())
#plot distribution of computed pi values and return the 90% conf interval for Temp = 31 degrees
hist(sim_vals[1,])
quantile(sim_vals[1,],c(0.05,0.95))
#plot distribution of computed pi values and return the 90% conf interval for Temp = 72 degrees
hist(sim_vals[2,])
quantile(sim_vals[2,],c(0.05,0.95))
?hist
#define sigmoid function for computing values of pi
sigmoid = function(x) {
1 / (1 + exp(-x))
}
#start with the parameter estimates from our model and our Temp data
beta0 = model2$coefficients[1]
beta1 = model2$coefficients[2]
x <- df$Temp
pi <- sigmoid(beta0 + beta1*x)
weights <- df$Number
#simulate new O.ring failure counts to estimate new model parameters
sim <- function(){
#simulate new O.ring failure counts as binomial random variable with n=6 trials and p=pi probability of success
y <- rbinom(n = length(x), size = 6, prob = pi)
#fit a new regression model on the simulated O.ring failure counts
mod.fit <- glm(y/weights ~ x, family = binomial, weights = weights)
beta0.star = mod.fit$coefficients[1]
beta1.star = mod.fit$coefficients[2]
#use new model to compute predicted probability of O.ring failure at Temp = 31 and 72 degrees
pi_star.31degrees <- sigmoid(beta0.star + beta1.star*31)
pi_star.72degrees <- sigmoid(beta0.star + beta1.star*72)
return(c(pi_star.31degrees,pi_star.72degrees))
}
#run simulation 10000 times
n=10000
sim_vals <- replicate(n,sim())
#plot distribution of computed pi values and return the 90% conf interval for Temp = 31 degrees
hist(sim_vals[1,], probability = T, xlab = "Probability of O-ring Failure", main = "Histogram of Bootstrap-Estimates of Probability of O-ring Failure at 31 Degrees")
quantile(sim_vals[1,],c(0.05,0.95))
#plot distribution of computed pi values and return the 90% conf interval for Temp = 72 degrees
hist(sim_vals[2,], probability = T, xlab = "Probability of O-ring Failure", main = "Histogram of Bootstrap-Estimates of Probability of O-ring Failure at 72 Degrees")
quantile(sim_vals[2,],c(0.05,0.95))
# #define sigmoid function for computing values of pi
# sigmoid = function(x) {
#    1 / (1 + exp(-x))
# }
#
# #start with the parameter estimates from our model and our Temp data
# beta0 = model2$coefficients[1]
# beta1 = model2$coefficients[2]
# x <- df$Temp
# pi <- sigmoid(beta0 + beta1*x)
# weights <- df$Number
#
# #simulate new O.ring failure counts to estimate new model parameters
# sim <- function(){
#   #simulate new O.ring failure counts as binomial random variable with n=6 trials and p=pi probability of success
#   y <- rbinom(n = length(x), size = 6, prob = pi)
#
#   #fit a new regression model on the simulated O.ring failure counts
#   mod.fit <- glm(y/weights ~ x, family = binomial, weights = weights)
#   beta0.star = mod.fit$coefficients[1]
#   beta1.star = mod.fit$coefficients[2]
#
#   #use new model to compute predicted probability of O.ring failure at Temp = 31 and 72 degrees
#   pi_star.31degrees <- sigmoid(beta0.star + beta1.star*31)
#   pi_star.72degrees <- sigmoid(beta0.star + beta1.star*72)
#   return(c(pi_star.31degrees,pi_star.72degrees))
# }
#
# #run simulation 10000 times
# n=10000
# sim_vals <- replicate(n,sim())
#plot distribution of computed pi values and return the 90% conf interval for Temp = 31 degrees
hist(sim_vals[1,], freq = F, xlab = "Probability of O-ring Failure", main = "Histogram of Bootstrap-Estimates of Probability of O-ring Failure at 31 Degrees")
quantile(sim_vals[1,],c(0.05,0.95))
#plot distribution of computed pi values and return the 90% conf interval for Temp = 72 degrees
hist(sim_vals[2,], freq = F, xlab = "Probability of O-ring Failure", main = "Histogram of Bootstrap-Estimates of Probability of O-ring Failure at 72 Degrees")
quantile(sim_vals[2,],c(0.05,0.95))
# #define sigmoid function for computing values of pi
# sigmoid = function(x) {
#    1 / (1 + exp(-x))
# }
#
# #start with the parameter estimates from our model and our Temp data
# beta0 = model2$coefficients[1]
# beta1 = model2$coefficients[2]
# x <- df$Temp
# pi <- sigmoid(beta0 + beta1*x)
# weights <- df$Number
#
# #simulate new O.ring failure counts to estimate new model parameters
# sim <- function(){
#   #simulate new O.ring failure counts as binomial random variable with n=6 trials and p=pi probability of success
#   y <- rbinom(n = length(x), size = 6, prob = pi)
#
#   #fit a new regression model on the simulated O.ring failure counts
#   mod.fit <- glm(y/weights ~ x, family = binomial, weights = weights)
#   beta0.star = mod.fit$coefficients[1]
#   beta1.star = mod.fit$coefficients[2]
#
#   #use new model to compute predicted probability of O.ring failure at Temp = 31 and 72 degrees
#   pi_star.31degrees <- sigmoid(beta0.star + beta1.star*31)
#   pi_star.72degrees <- sigmoid(beta0.star + beta1.star*72)
#   return(c(pi_star.31degrees,pi_star.72degrees))
# }
#
# #run simulation 10000 times
# n=10000
# sim_vals <- replicate(n,sim())
#plot distribution of computed pi values and return the 90% conf interval for Temp = 31 degrees
hist(sim_vals[1,], freq = T, xlab = "Probability of O-ring Failure", main = "Histogram of Bootstrap-Estimates of Probability of O-ring Failure at 31 Degrees")
quantile(sim_vals[1,],c(0.05,0.95))
#plot distribution of computed pi values and return the 90% conf interval for Temp = 72 degrees
hist(sim_vals[2,], freq = T, xlab = "Probability of O-ring Failure", main = "Histogram of Bootstrap-Estimates of Probability of O-ring Failure at 72 Degrees")
quantile(sim_vals[2,],c(0.05,0.95))
# #define sigmoid function for computing values of pi
# sigmoid = function(x) {
#    1 / (1 + exp(-x))
# }
#
# #start with the parameter estimates from our model and our Temp data
# beta0 = model2$coefficients[1]
# beta1 = model2$coefficients[2]
# x <- df$Temp
# pi <- sigmoid(beta0 + beta1*x)
# weights <- df$Number
#
# #simulate new O.ring failure counts to estimate new model parameters
# sim <- function(){
#   #simulate new O.ring failure counts as binomial random variable with n=6 trials and p=pi probability of success
#   y <- rbinom(n = length(x), size = 6, prob = pi)
#
#   #fit a new regression model on the simulated O.ring failure counts
#   mod.fit <- glm(y/weights ~ x, family = binomial, weights = weights)
#   beta0.star = mod.fit$coefficients[1]
#   beta1.star = mod.fit$coefficients[2]
#
#   #use new model to compute predicted probability of O.ring failure at Temp = 31 and 72 degrees
#   pi_star.31degrees <- sigmoid(beta0.star + beta1.star*31)
#   pi_star.72degrees <- sigmoid(beta0.star + beta1.star*72)
#   return(c(pi_star.31degrees,pi_star.72degrees))
# }
#
# #run simulation 10000 times
# n=10000
# sim_vals <- replicate(n,sim())
#plot distribution of computed pi values and return the 90% conf interval for Temp = 31 degrees
hist(sim_vals[1,], freq = F, xlab = "Probability of O-ring Failure", main = "Histogram of Bootstrap-Estimates of Probability of O-ring Failure at 31 Degrees")
quantile(sim_vals[1,],c(0.05,0.95))
#plot distribution of computed pi values and return the 90% conf interval for Temp = 72 degrees
hist(sim_vals[2,], freq = T, xlab = "Probability of O-ring Failure", main = "Histogram of Bootstrap-Estimates of Probability of O-ring Failure at 72 Degrees")
quantile(sim_vals[2,],c(0.05,0.95))
#plot distribution of computed pi values and return the 90% conf interval for Temp = 31 degrees
hist(sim_vals[1,], freq = T, xlab = "Probability of O-ring Failure", main = "Histogram of Bootstrap-Estimates of Probability of O-ring Failure at 31 Degrees")
quantile(sim_vals[1,],c(0.05,0.95))
# #define sigmoid function for computing values of pi
# sigmoid = function(x) {
#    1 / (1 + exp(-x))
# }
#
# #start with the parameter estimates from our model and our Temp data
# beta0 = model2$coefficients[1]
# beta1 = model2$coefficients[2]
# x <- df$Temp
# pi <- sigmoid(beta0 + beta1*x)
# weights <- df$Number
#
# #simulate new O.ring failure counts to estimate new model parameters
# sim <- function(){
#   #simulate new O.ring failure counts as binomial random variable with n=6 trials and p=pi probability of success
#   y <- rbinom(n = length(x), size = 6, prob = pi)
#
#   #fit a new regression model on the simulated O.ring failure counts
#   mod.fit <- glm(y/weights ~ x, family = binomial, weights = weights)
#   beta0.star = mod.fit$coefficients[1]
#   beta1.star = mod.fit$coefficients[2]
#
#   #use new model to compute predicted probability of O.ring failure at Temp = 31 and 72 degrees
#   pi_star.31degrees <- sigmoid(beta0.star + beta1.star*31)
#   pi_star.72degrees <- sigmoid(beta0.star + beta1.star*72)
#   return(c(pi_star.31degrees,pi_star.72degrees))
# }
#
# #run simulation 10000 times
# n=10000
# sim_vals <- replicate(n,sim())
#plot distribution of computed pi values and return the 90% conf interval for Temp = 31 degrees
hist(sim_vals[1,], freq = T, xlab = "Probability of O-ring Failure", main = "Histogram of Bootstrap-Estimates of Probability of O-ring Failure at 31 Degrees")
quantile(sim_vals[1,],c(0.05,0.95))
#plot distribution of computed pi values and return the 90% conf interval for Temp = 72 degrees
hist(sim_vals[2,], freq = T, xlab = "Probability of O-ring Failure", main = "Histogram of Bootstrap-Estimates of Probability of O-ring Failure at 72 Degrees")
quantile(sim_vals[2,],c(0.05,0.95))
# #define sigmoid function for computing values of pi
# sigmoid = function(x) {
#    1 / (1 + exp(-x))
# }
#
# #start with the parameter estimates from our model and our Temp data
# beta0 = model2$coefficients[1]
# beta1 = model2$coefficients[2]
# x <- df$Temp
# pi <- sigmoid(beta0 + beta1*x)
# weights <- df$Number
#
# #simulate new O.ring failure counts to estimate new model parameters
# sim <- function(){
#   #simulate new O.ring failure counts as binomial random variable with n=6 trials and p=pi probability of success
#   y <- rbinom(n = length(x), size = 6, prob = pi)
#
#   #fit a new regression model on the simulated O.ring failure counts
#   mod.fit <- glm(y/weights ~ x, family = binomial, weights = weights)
#   beta0.star = mod.fit$coefficients[1]
#   beta1.star = mod.fit$coefficients[2]
#
#   #use new model to compute predicted probability of O.ring failure at Temp = 31 and 72 degrees
#   pi_star.31degrees <- sigmoid(beta0.star + beta1.star*31)
#   pi_star.72degrees <- sigmoid(beta0.star + beta1.star*72)
#   return(c(pi_star.31degrees,pi_star.72degrees))
# }
#
# #run simulation 10000 times
# n=10000
# sim_vals <- replicate(n,sim())
#plot distribution of computed pi values and return the 90% conf interval for Temp = 31 degrees
hist(sim_vals[1,], freq = T, xlab = "Probability of O-ring Failure", main = "Histogram of 10000 Estimates of Probability of O-ring Failure at 31 Degrees")
quantile(sim_vals[1,],c(0.05,0.95))
#plot distribution of computed pi values and return the 90% conf interval for Temp = 72 degrees
hist(sim_vals[2,], freq = T, xlab = "Probability of O-ring Failure", main = "Histogram of 10000 Estimates of Probability of O-ring Failure at 72 Degrees")
quantile(sim_vals[2,],c(0.05,0.95))
